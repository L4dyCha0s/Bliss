const { banVote } = require('../gameState');

module.exports = {
    name: 'ban',
    description: 'Expulsa um membro do grupo. Se um admin usar, √© instant√¢neo. Se for um membro, inicia uma vota√ß√£o de 10 pessoas.',
    async execute(client, msg) {
        const chat = await msg.getChat();
        const autorId = msg.author || msg.from;

        if (!chat.isGroup) {
            msg.reply('‚ùå Este comando s√≥ pode ser usado em grupos.');
            return;
        }

        const mentionedIds = msg.mentionedIds;
        let targetId;

        if (mentionedIds && mentionedIds.length > 0) {
            targetId = mentionedIds[0];
        } else {
            msg.reply('‚ö†Ô∏è Voc√™ deve marcar o membro que deseja expulsar. Ex: `!ban @membro`');
            return;
        }

        const targetUser = chat.participants.find(p => p.id._serialized === targetId);

        if (!targetUser) {
            msg.reply('‚ùå Membro n√£o encontrado no grupo.');
            return;
        }

        // N√£o permite banir o pr√≥prio bot
        if (targetId === client.info.wid._serialized) {
            msg.reply('ü§ñ Eu n√£o posso me expulsar!');
            return;
        }

        // L√≥gica para verificar se o usu√°rio que executou o comando √© admin
        const autorParticipant = chat.participants.find(p => p.id._serialized === autorId);
        const isAdmin = autorParticipant && autorParticipant.isAdmin;

        // VERIFICA√á√ÉO INSTANT√ÇNEA PARA ADMINS
        if (isAdmin) {
            // Verifica se o alvo n√£o √© um admin tamb√©m
            if (targetUser.isAdmin) {
                msg.reply('‚ùå N√£o √© poss√≠vel expulsar outro administrador.');
                return;
            }

            try {
                await chat.removeParticipants([targetId]);
                const targetContact = await client.getContactById(targetId);
                const replyMessage = `‚ö° *BANIMENTO INSTANT√ÇNEO*\n\n‚úÖ ${targetContact.pushname || targetContact.verifiedName} foi expulso(a) do grupo por um administrador.`;
                await msg.reply(replyMessage, null, { mentions: [targetContact] });
            } catch (error) {
                console.error('Erro ao expulsar membro:', error);
                msg.reply('‚ùå Ocorreu um erro ao tentar expulsar o membro. O bot pode n√£o ter permiss√£o de administrador.');
            }
            return;
        }

        // L√ìGICA DE VOTA√á√ÉO PARA USU√ÅRIOS COMUNS
        if (banVote.isActive && banVote.groupId === chat.id._serialized) {
            msg.reply('‚ö†Ô∏è J√° existe uma vota√ß√£o de banimento em andamento. Por favor, aguarde o resultado.');
            return;
        }

        if (targetUser.isAdmin) {
            msg.reply('‚ùå N√£o √© poss√≠vel iniciar uma vota√ß√£o para expulsar um administrador.');
            return;
        }

        // Verificar se o alvo n√£o √© o pr√≥prio autor
        if (targetId === autorId) {
            msg.reply('‚ùå Voc√™ n√£o pode iniciar uma vota√ß√£o para se banir!');
            return;
        }

        // Inicializar vota√ß√£o
        banVote.isActive = true;
        banVote.groupId = chat.id._serialized;
        banVote.proposerId = autorId;
        banVote.targetUserId = targetId;
        banVote.targetUserContact = targetUser;
        banVote.votes = [autorId]; // Autor vota automaticamente
        banVote.startTime = Date.now();
        banVote.timeoutDuration = 10 * 60 * 1000; // 10 minutos

        const autorContact = await client.getContactById(autorId);
        const targetContact = await client.getContactById(targetId);

        const mensagemVotacao = `‚öñÔ∏è *VOTA√á√ÉO DE BANIMENTO INICIADA!*\n\n` +
            `üë§ *Acusador:* ${autorContact.pushname || autorContact.verifiedName}\n` +
            `üéØ *Acusado:* ${targetContact.pushname || targetContact.verifiedName}\n\n` +
            `üó≥Ô∏è *Para votar a favor do banimento, responda esta mensagem com:*\n` +
            `**\`!votarbanir\`**\n\n` +
            `üìä *Votos atuais:* 1/10 necess√°rios\n` +
            `‚è∞ *Tempo restante:* 10 minutos\n\n` 

        const sentMessage = await chat.sendMessage(mensagemVotacao, {
            mentions: [targetContact]
        });
        
        banVote.voteMessageId = sentMessage.id._serialized;

        // Timer para expirar a vota√ß√£o
        banVote.timeout = setTimeout(async () => {
            if (banVote.isActive && banVote.groupId === chat.id._serialized) {
                banVote.isActive = false;
                
                if (banVote.votes.length >= 10) {
                    try {
                        await chat.removeParticipants([targetId]);
                        await chat.sendMessage(
                            `‚è∞ *VOTA√á√ÉO ENCERRADA - BANIMENTO APROVADO!*\n\n` +
                            `‚úÖ ${targetContact.pushname || targetContact.verifiedName} foi expulso(a) do grupo por vota√ß√£o popular.\n` +
                            `üìä Resultado: ${banVote.votes.length}/10 votos`,
                            { mentions: [targetContact] }
                        );
                    } catch (error) {
                        console.error('Erro ao expulsar por vota√ß√£o:', error);
                        await chat.sendMessage('‚ùå Erro ao executar o banimento. O bot pode n√£o ter permiss√µes.');
                    }
                } else {
                    await chat.sendMessage(
                        `‚è∞ *VOTA√á√ÉO ENCERRADA - BANIMENTO REPROVADO!*\n\n` +
                        `‚ùå Vota√ß√£o de banimento de ${targetContact.pushname || targetContact.verifiedName} fracassou.\n` +
                        `üìä Resultado: ${banVote.votes.length}/10 votos (necess√°rio 10)`,
                        { mentions: [targetContact] }
                    );
                }
                
                // Resetar estado da vota√ß√£o
                banVote.isActive = false;
                banVote.groupId = null;
                banVote.votes = [];
            }
        }, banVote.timeoutDuration);
    }
};