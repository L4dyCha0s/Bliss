const { verdadeOuDesafioState, TIMEOUT_DURATION_VOD } = require('../gameState'); // Ajuste o caminho
const { gerarConteudoComGemini } = require('../servi√ßo-gemini'); // Ajuste o caminho para seu m√≥dulo Gemini

// Fun√ß√£o para resetar o estado do jogo VOD
function resetVodState() {
    verdadeOuDesafioState.isActive = false;
    verdadeOuDesafioState.currentPlayerId = null;
    verdadeOuDesafioState.currentPlayerContact = null;
    verdadeOuDesafioState.choice = null;
    verdadeOuDesafioState.level = 0;
    clearTimeout(verdadeOuDesafioState.gameTimeout); // Limpa qualquer timeout ativo
    verdadeOuDesafioState.gameTimeout = null;
    verdadeOuDesafioState.nextChooserId = null; // Reseta o pr√≥ximo desafiante
}

module.exports = async (client, msg) => {
    const chat = await msg.getChat();

    if (!chat.isGroup) {
        msg.reply('Este comando s√≥ funciona em grupos.');
        return;
    }

    const autorId = msg.author || msg.from;
    const autorContact = await client.getContactById(autorId);
    
    const partesMsg = msg.body.trim().toLowerCase().split(' ');
    const args = partesMsg.slice(1);
    let choice = args[0]; // 'verdade' ou 'desafio'
    let level = parseInt(args[1]); // N√≠vel de 1 a 5
    let idMencionadoParaJogar = msg.mentionedIds && msg.mentionedIds.length > 0 ? msg.mentionedIds[0] : null;

    const todosParticipantesIds = chat.participants
        .filter(p => p.id._serialized !== client.info.wid._serialized)
        .map(p => p.id._serialized);

    // --- L√≥gica de ajuda e ativa√ß√£o do jogo ---
    if (args.length === 0 || (args.length === 1 && !['verdade', 'desafio'].includes(choice))) {
        const helpMessage = `
üéâ Bem-vindos ao *Verdade ou Desafio*! üéâ

Para jogar:
* Use \`!vod [verdade/desafio] [n√≠vel 1-5]\` para iniciar uma rodada.
    * Ex: \`!vod verdade 3\` (para uma verdade de n√≠vel m√©dio)
    * Ex: \`!vod desafio 5\` (para um desafio super ousado)
* Para iniciar o jogo e j√° marcar algu√©m para jogar a primeira rodada:
    * Ex: \`!vod verdade 5 @[nome da pessoa]\`
* N√≠veis: 1 (bem leve) a 5 (mais ousado, mas divertido!).

A pessoa sorteada/marcada ter√° um tempo para responder ou realizar. Se ela conseguir, ela ganha o direito de desafiar a pr√≥xima pessoa!`;
        msg.reply(helpMessage);
        return;
    }

    // --- L√≥gica de controle do jogo ativo ---
    if (verdadeOuDesafioState.isActive) {
        if (autorId !== verdadeOuDesafioState.currentPlayerId) {
            await msg.reply(
                `O Jogo "Verdade ou Desafio" j√° est√° ativo! √â a vez de @${verdadeOuDesafioState.currentPlayerContact.id.user} responder ou realizar o(a) ${verdadeOuDesafioState.choice}.`,
                null,
                { mentions: [verdadeOuDesafioState.currentPlayerContact] }
            );
            return;
        } else {
            // Se o jogador atual tenta iniciar o jogo novamente, isso significa que ele respondeu.
            // Concede a ele o direito de ser o "pr√≥ximo desafiante".
            verdadeOuDesafioState.nextChooserId = autorId;
            await msg.reply(`Parab√©ns, @${autorContact.id.user}! Voc√™ concluiu seu ${verdadeOuDesafioState.choice}! Agora voc√™ pode usar \`!vod [verdade/desafio] [n√≠vel 1-5] @[nova pessoa]\` para desafiar a pr√≥xima pessoa!`);
            resetVodState(); // Reseta o estado do jogo, mas mant√©m nextChooserId
            return;
        }
    }
    
    // --- Valida√ß√£o para quem pode iniciar o jogo ---
    if (verdadeOuDesafioState.nextChooserId && autorId !== verdadeOuDesafioState.nextChooserId) {
        const nextChooserContact = await client.getContactById(verdadeOuDesafioState.nextChooserId);
        await msg.reply(
            `No momento, apenas @${nextChooserContact.id.user} pode iniciar a pr√≥xima rodada do Verdade ou Desafio!`,
            null,
            { mentions: [nextChooserContact] }
        );
        return;
    }

    // --- Valida√ß√£o dos argumentos para iniciar o jogo (novo ou pelo nextChooserId) ---
    if (!choice || !['verdade', 'desafio'].includes(choice)) {
        msg.reply('Para come√ßar, use `!vod [verdade/desafio] [n√≠vel 1-5]`. Ex: `!vod verdade 3` ou `!vod desafio 5`.');
        return;
    }
    if (isNaN(level) || level < 1 || level > 5) {
        msg.reply('O n√≠vel deve ser um n√∫mero entre 1 e 5. Ex: `!vod verdade 3`.');
        return;
    }

    // --- Determina quem ser√° o jogador (sorteado ou marcado) ---
    let sorteadoId;
    let sorteadoContact;

    if (idMencionadoParaJogar) {
        if (!todosParticipantesIds.includes(idMencionadoParaJogar)) {
            msg.reply('A pessoa mencionada n√£o √© um participante v√°lido do grupo. Por favor, mencione um membro do grupo para o desafio.');
            return;
        }
        if (idMencionadoParaJogar === autorId) {
            msg.reply('Voc√™ n√£o pode se desafiar, desafie outra pessoa!');
            return;
        }
        sorteadoId = idMencionadoParaJogar;
        sorteadoContact = await client.getContactById(sorteadoId);
    } else {
        const participantesParaSorteio = todosParticipantesIds.filter(id => id !== autorId);
        if (participantesParaSorteio.length === 0) {
            msg.reply('N√£o h√° outros participantes suficientes no grupo para iniciar o "Verdade ou Desafio".');
            return;
        }
        sorteadoId = participantesParaSorteio[Math.floor(Math.random() * participantesParaSorteio.length)];
        sorteadoContact = await client.getContactById(sorteadoId);
    }

    // Atualiza o estado do jogo
    verdadeOuDesafioState.isActive = true;
    verdadeOuDesafioState.currentPlayerId = sorteadoId;
    verdadeOuDesafioState.currentPlayerContact = sorteadoContact;
    verdadeOuDesafioState.choice = choice;
    verdadeOuDesafioState.level = level;
    verdadeOuDesafioState.nextChooserId = null; // Reseta o pr√≥ximo desafiante ao iniciar uma nova rodada

    // Explica√ß√£o do jogo e sorteio/marca√ß√£o
    await chat.sendMessage(
        `üéâ O Jogo *Verdade ou Desafio* come√ßou! üéâ\n\n` +
        `E a pessoa para jogar √©... @${sorteadoContact.id.user}! ` +
        `Sua escolha foi **${choice.toUpperCase()}** no n√≠vel ${level}.\n\n` +
        `Preparando a pergunta/desafio para o n√≠vel ${level} com a IA...`,
        { mentions: [sorteadoContact] }
    );

    let perguntaGerada;
    try {
        const prompt = `Gere uma ${choice} para o jogo "Verdade ou Desafio". O n√≠vel de "pesado" deve ser ${level} (onde 1 √© muito leve e 5 √© extremamente pesado/ousado, mas sempre mantendo um limite para ser um jogo de grupo). N√£o inclua a palavra "verdade" ou "desafio" na resposta.`;
        perguntaGerada = await gerarConteudoComGemini(prompt);
        
        if (!perguntaGerada || perguntaGerada.trim() === '') {
            perguntaGerada = `N√£o foi poss√≠vel gerar uma ${choice} para voc√™ neste momento. Tente novamente!`;
        }
    } catch (error) {
        console.error('Erro ao gerar conte√∫do com Gemini para Verdade ou Desafio:', error);
        perguntaGerada = `Houve um erro ao gerar a ${choice} com a IA. Por favor, tente novamente mais tarde.`;
    }

    // Envia a pergunta/desafio gerada pela IA
    await chat.sendMessage(
        `@${sorteadoContact.id.user}, aqui est√° seu(sua) ${choice} (N√≠vel ${level}):\n\n` +
        `"${perguntaGerada}"\n\n` +
        `Voc√™ tem ${TIMEOUT_DURATION_VOD / 1000 / 60} minutos para responder/realizar! Para avisar que terminou, envie \`!vod\`.`,
        { mentions: [sorteadoContact] }
    );

    // Define o timeout para a resposta do jogador
    verdadeOuDesafioState.gameTimeout = setTimeout(async () => {
        if (verdadeOuDesafioState.isActive && verdadeOuDesafioState.currentPlayerId === sorteadoId) {
            await chat.sendMessage(
                `Tempo esgotado para o @${sorteadoContact.id.user}! O "Verdade ou Desafio" foi resetado. Algu√©m pode iniciar uma nova rodada com \`!vod [verdade/desafio] [n√≠vel 1-5]\`.`,
                { mentions: [sorteadoContact] }
            );
            resetVodState(); // Reseta tudo, incluindo nextChooserId
        }
    }, TIMEOUT_DURATION_VOD);
};