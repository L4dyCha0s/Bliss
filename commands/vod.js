const fs = require('fs');
const path = require('path');

// Importa√ß√£o do gameState, que cont√©m o estado e a constante do tempo
const { verdadeOuDesafioState, TIMEOUT_DURATION_VOD } = require('../gameState'); 
const { gerarConteudoComGemini } = require('../servi√ßo-gemini');

const vodHistoricoPath = path.join(__dirname, '..', 'data', 'vod_historico.json');

// Banco de fallback para quando a IA falhar
const PERGUNTAS_FALLBACK = {
    verdade: [
        "Qual foi a √∫ltima vez que voc√™ se masturbou?",
        "J√° ficou excitado(a) com algu√©m deste grupo? Quem?",
        "Qual sua fantasia sexual mais secreta?",
        "J√° traiu algum namorado(a)?",
        "Qual a coisa mais vergonhosa que j√° fez por paix√£o?",
        "J√° mandou nudes para algu√©m? Para quem?",
        "Qual app de paquera voc√™ mais usa?",
        "J√° ficou com algu√©m do trabalho/faculdade escondido?",
        "Qual sua posi√ß√£o sexual favorita?",
        "J√° fez sexo em lugar p√∫blico? Onde?"
    ],
    desafio: [
        "Mande uma mensagem de voz gemendo dramaticamente",
        "Poste uma foto sua de inf√¢ncia no status",
        "Mande um √°udio cantando uma m√∫sica rom√¢ntica desafinado",
        "Coloque uma foto de um animal fofo como foto de perfil por 1 hora",
        "Mande um √°udio imitando um personagem famoso",
        "Poste no status 'Estou gr√°vido(a)' sem contexto",
        "Mande uma mensagem de voz dizendo 'Eu te amo' para 3 contatos aleat√≥rios",
        "Fa√ßa uma story fazendo caras e bocas",
        "Mande um √°udio contando uma piada ruim",
        "Poste uma letra de m√∫sica brega no status"
    ]
};

function carregarVodHistorico() {
    try {
        if (fs.existsSync(vodHistoricoPath)) {
            const data = fs.readFileSync(vodHistoricoPath, 'utf8');
            const parsedData = JSON.parse(data);
            return Array.isArray(parsedData) ? parsedData : [];
        }
    } catch (e) {
        console.error('Erro ao carregar ou parsear vod_historico.json:', e);
    }
    return [];
}

function salvarVodHistorico(novaEntrada) {
    let historico = carregarVodHistorico();
    
    historico.unshift(novaEntrada);
    
    const maxEntradas = 100; 
    if (historico.length > maxEntradas) {
        historico = historico.slice(0, maxEntradas);
    }

    try {
        fs.writeFileSync(vodHistoricoPath, JSON.stringify(historico, null, 2), 'utf8');
    } catch (e) {
        console.error('Erro ao salvar nova entrada no vod_historico.json:', e);
    }
}

// --- Fun√ß√µes de controle de estado OTIMIZADAS ---
function resetVodState() {
    verdadeOuDesafioState.isActive = false;
    verdadeOuDesafioState.currentPlayerId = null;
    verdadeOuDesafioState.currentPlayerContact = null;
    verdadeOuDesafioState.choice = null;
    verdadeOuDesafioState.level = 0;
    clearTimeout(verdadeOuDesafioState.gameTimeout);
    verdadeOuDesafioState.gameTimeout = null;
    verdadeOuDesafioState.nextChooserId = null;
}

function endVodTurn(nextChooserId) {
    verdadeOuDesafioState.isActive = false;
    verdadeOuDesafioState.currentPlayerId = null;
    verdadeOuDesafioState.currentPlayerContact = null;
    verdadeOuDesafioState.choice = null;
    verdadeOuDesafioState.level = 0;
    clearTimeout(verdadeOuDesafioState.gameTimeout);
    verdadeOuDesafioState.gameTimeout = null;
    verdadeOuDesafioState.nextChooserId = nextChooserId;
}
// --- Fim das fun√ß√µes de controle de estado ---

// Fun√ß√£o para obter pergunta do fallback aleatoriamente
function obterPerguntaFallback(choice) {
    const perguntas = PERGUNTAS_FALLBACK[choice];
    return perguntas[Math.floor(Math.random() * perguntas.length)];
}

module.exports = async (client, msg) => {
    const chat = await msg.getChat();

    if (!chat.isGroup) {
        msg.reply('Este comando s√≥ funciona em grupos.');
        return;
    }

    const autorId = msg.author || msg.from;
    const autorContact = await client.getContactById(autorId);
    
    const partesMsg = msg.body.trim().toLowerCase().split(' ');
    const args = partesMsg.slice(1);
    let choice = args[0];
    const level = 5; 
    let idMencionadoParaJogar = msg.mentionedIds && msg.mentionedIds.length > 0 ? msg.mentionedIds[0] : null;

    const todosParticipantesIds = chat.participants
        .filter(p => p.id._serialized !== client.info.wid._serialized)
        .map(p => p.id._serialized);

    if (args.length === 0 || !['verdade', 'desafio'].includes(choice)) {
        const helpMessage = `
üéâ *Verdade ou Desafio Digital*! üéâ

Para jogar:
* Use \`!vod [verdade/desafio]\` para iniciar
* Ex: \`!vod verdade\` ou \`!vod desafio @amigo\`

üì± *Desafios Digitais:* A√ß√µes que podem ser feitas pelo WhatsApp!
üî• *Verdades Picantes:* Perguntas ousadas e vergonhosas!

A pessoa ter√° 5 minutos para responder/realizar!`;
        msg.reply(helpMessage);
        return;
    }

    if (verdadeOuDesafioState.isActive) {
        if (autorId !== verdadeOuDesafioState.currentPlayerId) {
            await msg.reply(
                `O Jogo j√° est√° ativo! √â a vez de @${verdadeOuDesafioState.currentPlayerContact.id.user} responder o(a) ${verdadeOuDesafioState.choice}.`,
                null,
                { mentions: [verdadeOuDesafioState.currentPlayerContact] }
            );
            return;
        } else {
            endVodTurn(autorId);
            await msg.reply(`‚úÖ Parab√©ns, @${autorContact.id.user}! Agora voc√™ pode desafiar algu√©m com \`!vod [verdade/desafio] @pessoa\`!`);
            return;
        }
    }
    
    if (verdadeOuDesafioState.nextChooserId && autorId !== verdadeOuDesafioState.nextChooserId) {
        const nextChooserContact = await client.getContactById(verdadeOuDesafioState.nextChooserId);
        await msg.reply(
            `Apenas @${nextChooserContact.id.user} pode iniciar a pr√≥xima rodada!`,
            null,
            { mentions: [nextChooserContact] }
        );
        return;
    }

    let sorteadoId;
    let sorteadoContact;

    if (idMencionadoParaJogar) {
        if (!todosParticipantesIds.includes(idMencionadoParaJogar)) {
            msg.reply('Mencione um membro v√°lido do grupo!');
            return;
        }
        if (idMencionadoParaJogar === autorId) {
            msg.reply('Voc√™ n√£o pode se desafiar!');
            return;
        }
        sorteadoId = idMencionadoParaJogar;
        sorteadoContact = await client.getContactById(sorteadoId);
    } else {
        const participantesParaSorteio = todosParticipantesIds.filter(id => id !== autorId);
        if (participantesParaSorteio.length === 0) {
            msg.reply('N√£o h√° participantes suficientes!');
            return;
        }
        sorteadoId = participantesParaSorteio[Math.floor(Math.random() * participantesParaSorteio.length)];
        sorteadoContact = await client.getContactById(sorteadoId);
    }

    verdadeOuDesafioState.isActive = true;
    verdadeOuDesafioState.currentPlayerId = sorteadoId;
    verdadeOuDesafioState.currentPlayerContact = sorteadoContact;
    verdadeOuDesafioState.choice = choice;
    verdadeOuDesafioState.level = level;
    verdadeOuDesafioState.nextChooserId = null;

    await chat.sendMessage(
        `üéâ *Verdade ou Desafio Digital*! üéâ\n\n` +
        `Sorteado: @${sorteadoContact.id.user}\n` +
        `Escolha: **${choice.toUpperCase()}**\n\n` +
        `Gerando ${choice}...`,
        { mentions: [sorteadoContact] }
    );

    let perguntaGerada;
    try {
        const historicoVod = carregarVodHistorico();
        
        // PROMPTS OTIMIZADOS PARA WHATSAPP
        const prompts = {
            verdade: `Gere uma VERDADE picante/vergonhosa para WhatsApp (m√°ximo 2 linhas). 
            Deve ser ousada mas n√£o expl√≠cita. Foco em: hist√≥rias vergonhas, segredos sexuais, paix√µes secretas, trai√ß√µes, fantasias, experi√™ncias √≠ntimas.
            Exemplos: "Qual sua pior hist√≥ria de paquera?" "J√° ficou com amigo(a) de seu ex?"`,
            
            desafio: `Gere um DESAFIO DIGITAL para WhatsApp (m√°ximo 2 linhas). 
            Deve ser uma a√ß√£o que pode ser feita pelo celular: enviar √°udio, mudar foto, postar status, mandar mensagem, etc.
            Exemplos: "Mande √°udio cantando m√∫sica brega" "Poste status com emoji de cora√ß√£o por 1h"`
        };

        let promptCompleto = `${prompts[choice]} N√≠vel 5 (ousado). N√£o inclua a palavra "verdade" ou "desafio" na resposta.`;

        if (historicoVod.length > 0) {
            const ultimasPerguntas = historicoVod.slice(0, 10).join(' | ');
            promptCompleto += ` N√£o repita: ${ultimasPerguntas}`;
        }

        perguntaGerada = await gerarConteudoComGemini(promptCompleto);
        
        // Fallback se a IA gerar algo ruim
        if (!perguntaGerada || perguntaGerada.trim() === '' || perguntaGerada.length > 200) {
            perguntaGerada = obterPerguntaFallback(choice);
        }

    } catch (error) {
        console.error('Erro ao gerar conte√∫do:', error);
        perguntaGerada = obterPerguntaFallback(choice);
    }

    // Garantir que a pergunta seja curta
    perguntaGerada = perguntaGerada.trim().substring(0, 150);

    await chat.sendMessage(
        `@${sorteadoContact.id.user}, seu(sua) ${choice}:\n\n` +
        `"${perguntaGerada}"\n\n` +
        `‚è∞ 5 minutos para responder/realizar!\n` +
        `‚úÖ Use \`!vod\` quando terminar!`,
        { mentions: [sorteadoContact] }
    );

    salvarVodHistorico(perguntaGerada);

    verdadeOuDesafioState.gameTimeout = setTimeout(async () => {
        if (verdadeOuDesafioState.isActive && verdadeOuDesafioState.currentPlayerId === sorteadoId) {
            await chat.sendMessage(
                `‚è∞ Tempo esgotado para @${sorteadoContact.id.user}! O jogo foi resetado.`,
                { mentions: [sorteadoContact] }
            );
            resetVodState();
        }
    }, TIMEOUT_DURATION_VOD);
};